import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import re

class FileSearchGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("File Search Tool")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Configure style
        style = ttk.Style()
        style.theme_use('clam')
        
        self.setup_ui()
        self.search_thread = None
        
    def setup_ui(self):
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # Directory selection
        ttk.Label(main_frame, text="Search Directory:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        
        dir_frame = ttk.Frame(main_frame)
        dir_frame.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=(0, 5))
        dir_frame.columnconfigure(0, weight=1)
        
        self.dir_var = tk.StringVar()
        self.dir_entry = ttk.Entry(dir_frame, textvariable=self.dir_var)
        self.dir_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        ttk.Button(dir_frame, text="Browse", command=self.browse_directory).grid(row=0, column=1)
        
        # Search term
        ttk.Label(main_frame, text="Search Term:").grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        
        search_frame = ttk.Frame(main_frame)
        search_frame.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=(0, 5))
        search_frame.columnconfigure(0, weight=1)
        
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var)
        search_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        search_entry.bind('<Return>', lambda e: self.start_search())
        
        # Options frame
        options_frame = ttk.Frame(main_frame)
        options_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Case sensitive option
        self.case_sensitive_var = tk.BooleanVar()
        case_check = ttk.Checkbutton(options_frame, text="Case Sensitive", variable=self.case_sensitive_var)
        case_check.pack(side=tk.LEFT, padx=(0, 20))
        
        # Context lines option
        self.context_lines_var = tk.BooleanVar()
        context_check = ttk.Checkbutton(options_frame, text="Include Context Lines", variable=self.context_lines_var)
        context_check.pack(side=tk.LEFT, padx=(0, 20))
        
        # No duplicate results option
        self.no_duplicates_var = tk.BooleanVar()
        no_duplicates_check = ttk.Checkbutton(options_frame, text="No Duplicate Results", variable=self.no_duplicates_var)
        no_duplicates_check.pack(side=tk.LEFT)
        
        # Show skipped files option
        self.show_skipped_var = tk.BooleanVar()
        show_skipped_check = ttk.Checkbutton(options_frame, text="Show Skipped Files", variable=self.show_skipped_var)
        show_skipped_check.pack(side=tk.LEFT, padx=(20, 0))
        
        # Prepare a variable to store skipped files
        self.skipped_files = []
        
        # Search button and progress
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=(0, 10))
        
        self.search_button = ttk.Button(button_frame, text="Search", command=self.start_search)
        self.search_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.progress = ttk.Progressbar(button_frame, mode='indeterminate')
        self.progress.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.status_label = ttk.Label(button_frame, text="Ready")
        self.status_label.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Results area
        ttk.Label(main_frame, text="Results:").grid(row=4, column=0, sticky=(tk.W, tk.N))
        
        # Create frame for results with scrollbar
        result_frame = ttk.Frame(main_frame)
        result_frame.grid(row=4, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        result_frame.columnconfigure(0, weight=1)
        result_frame.rowconfigure(0, weight=1)
        
        self.result_text = scrolledtext.ScrolledText(
            result_frame, 
            wrap=tk.WORD, 
            height=20,
            font=('Consolas', 10)
        )
        self.result_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure text tags for highlighting
        self.result_text.tag_config("highlight", background="#ffeb3b", foreground="black", font=('Consolas', 10, 'bold'), relief="raised", borderwidth=1)
        self.result_text.tag_config("path", foreground="#0066cc", font=('Consolas', 10, 'bold'))
        self.result_text.tag_config("line_num", foreground="#009900")
        
    def browse_directory(self):
        directory = filedialog.askdirectory()
        if directory:
            self.dir_var.set(directory)
    
    def start_search(self):
        directory = self.dir_var.get().strip()
        search_term = self.search_var.get().strip()
        
        if not directory:
            messagebox.showerror("Error", "Please select a directory to search.")
            return
        
        if not search_term:
            messagebox.showerror("Error", "Please enter a search term.")
            return
        
        if not os.path.exists(directory):
            messagebox.showerror("Error", "The specified directory does not exist.")
            return
        
        # Disable search button and start progress
        self.search_button.config(state='disabled')
        self.progress.start()
        self.status_label.config(text="Searching...")
        self.result_text.delete(1.0, tk.END)
        
        # Start search in separate thread
        self.search_thread = threading.Thread(
            target=self.perform_search, 
            args=(directory, search_term)
        )
        self.search_thread.daemon = True
        self.search_thread.start()
    
    def perform_search(self, directory, search_term):
        try:
            case_sensitive = self.case_sensitive_var.get()
            context_lines = self.context_lines_var.get()
            no_duplicates = self.no_duplicates_var.get()
            show_skipped = self.show_skipped_var.get()
            results = self.search_files(directory, search_term, case_sensitive, context_lines, no_duplicates, show_skipped)
            # Update UI in main thread
            self.root.after(0, self.display_results, results, search_term)
        except Exception as e:
            self.root.after(0, self.search_error, str(e))
    
    def search_error(self, error_msg):
        self.progress.stop()
        self.search_button.config(state='normal')
        self.status_label.config(text="Error occurred")
        messagebox.showerror("Search Error", f"An error occurred during search:\n{error_msg}")
    
    def display_results(self, results, search_term):
        self.progress.stop()
        self.search_button.config(state='normal')
        
        if not results:
            self.status_label.config(text="No matches found")
            self.result_text.insert(tk.END, "No matches found.")
        else:
            self.status_label.config(text=f"Found {len(results)} match(es)")
            for i, result in enumerate(results):
                if i > 0:
                    self.result_text.insert(tk.END, "\n\n")
                if isinstance(result, tuple) and len(result) == 3:
                    filepath, line_num, line_content = result
                    path_line = f"{filepath} (line {line_num}):\n"
                    start_pos = self.result_text.index(tk.END + "-1c")
                    self.result_text.insert(tk.END, path_line)
                    end_pos = self.result_text.index(tk.END + "-1c")
                    self.result_text.tag_add("path", start_pos, end_pos)
                    self.insert_highlighted_text(line_content, search_term)
                else:
                    filepath, context_data = result
                    match_line_num = None
                    for line_info in context_data:
                        line_num, line_content, is_match = line_info
                        if is_match:
                            match_line_num = line_num
                            break
                    if match_line_num:
                        path_line = f"{filepath} (line {match_line_num}):\n"
                    else:
                        path_line = f"{filepath}:\n"
                    start_pos = self.result_text.index(tk.END + "-1c")
                    self.result_text.insert(tk.END, path_line)
                    end_pos = self.result_text.index(tk.END + "-1c")
                    self.result_text.tag_add("path", start_pos, end_pos)
                    for line_info in context_data:
                        line_num, line_content, is_match = line_info
                        if is_match:
                            line_with_number = f"  {line_num}: {line_content}"
                            self.insert_highlighted_text(line_with_number, search_term)
                        else:
                            line_with_number = f"  {line_num}: {line_content}\n"
                            self.result_text.insert(tk.END, line_with_number)
        # Show skipped files if enabled
        if self.show_skipped_var.get() and self.skipped_files:
            self.result_text.insert(tk.END, "\n\n--- Skipped Files (not searched) ---\n")
            for skipped in self.skipped_files:
                self.result_text.insert(tk.END, skipped + "\n")
    
    def insert_highlighted_text(self, text, search_term):
        if not search_term:
            self.result_text.insert(tk.END, text + "\n")
            return
        
        # Find all occurrences of search term (case sensitive or insensitive based on option)
        case_sensitive = self.case_sensitive_var.get()
        
        if case_sensitive:
            search_text = text
            search_pattern = re.escape(search_term)
        else:
            search_text = text.lower()
            search_pattern = re.escape(search_term.lower())
        
        # Find all matches and their positions
        matches = []
        for match in re.finditer(search_pattern, search_text):
            start, end = match.span()
            matches.append((start, end))
        
        if not matches:
            # No matches found, just insert the text
            self.result_text.insert(tk.END, text + "\n")
            return
        
        # Build the text with proper highlighting
        last_end = 0
        for start, end in matches:
            # Insert text before the match
            if start > last_end:
                self.result_text.insert(tk.END, text[last_end:start])
            
            # Insert the highlighted match with tag
            self.result_text.insert(tk.END, text[start:end], "highlight")
            
            last_end = end
        
        # Insert remaining text after the last match
        if last_end < len(text):
            self.result_text.insert(tk.END, text[last_end:])
        
        self.result_text.insert(tk.END, "\n")
    
    def is_text_file(self, filepath):
        """Enhanced text file detection supporting many file types"""
        # Get file extension
        _, ext = os.path.splitext(filepath.lower())
        
        # Comprehensive list of text file extensions
        text_extensions = {
            # Programming languages
            '.py', '.js', '.ts', '.jsx', '.tsx', '.html', '.htm', '.css', '.scss', '.sass',
            '.java', '.cpp', '.c', '.h', '.hpp', '.cs', '.php', '.rb', '.go', '.rs', '.swift',
            '.kt', '.scala', '.pl', '.sh', '.bash', '.zsh', '.fish', '.ps1', '.bat', '.cmd',
            '.vbs', '.lua', '.r', '.m', '.sql', '.plsql', '.tcl', '.awk', '.sed',
            
            # Web and markup
            '.xml', '.json', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf', '.config',
            '.md', '.markdown', '.rst', '.tex', '.latex', '.asciidoc', '.adoc',
            
            # Data formats
            '.csv', '.tsv', '.txt', '.log', '.dat', '.asc', '.tab', '.psv',
            
            # Configuration files
            '.env', '.properties', '.rc', '.profile', '.bashrc', '.zshrc', '.gitignore',
            '.dockerfile', '.dockerignore', '.gitattributes', '.editorconfig',
            
            # Documentation
            '.readme', '.license', '.changelog', '.version', '.authors', '.contributors',
            
            # Build and package files
            '.makefile', '.mk', '.cmake', '.cmakelists', '.gradle', '.maven', '.pom',
            '.package.json', '.package-lock.json', '.yarn.lock', '.composer.json',
            '.requirements.txt', '.setup.py', '.pyproject.toml', '.cargo.toml',
            '.gemfile', '.gemfile.lock', '.mix.exs', '.mix.lock',
            
            # IDE and editor files
            '.vscode', '.idea', '.sublime-project', '.sublime-workspace',
            
            # Other text formats
            '.diff', '.patch', '.svn', '.git', '.hg', '.bzr',
            '.nfo', '.diz', '.sfv', '.md5', '.sha1', '.sha256'
        }
        
        # Check if extension is in our known text extensions
        if ext in text_extensions:
            return True
        
        # For files without extensions or unknown extensions, do a more thorough check
        try:
            with open(filepath, 'rb') as f:
                # Read first 4KB to analyze
                chunk = f.read(4096)
                if not chunk:  # Empty file
                    return True
                
                # Check for null bytes (binary indicator)
                if b'\x00' in chunk:
                    return False
                
                # Check for high percentage of printable ASCII/UTF-8 characters
                printable_count = sum(1 for byte in chunk if 32 <= byte <= 126 or byte in (9, 10, 13))
                printable_ratio = printable_count / len(chunk)
                
                # If more than 90% is printable, likely text
                if printable_ratio > 0.9:
                    return True
                
                # Check for common text file signatures
                text_signatures = [
                    b'#!',  # Shebang
                    b'<?xml',  # XML
                    b'<!DOCTYPE',  # HTML
                    b'<html',  # HTML
                    b'{',  # JSON
                    b'[',  # JSON array
                    b'#',  # Comments
                    b'//',  # Comments
                    b'/*',  # Comments
                    b'<!--',  # HTML comments
                ]
                
                chunk_str = chunk.decode('utf-8', errors='ignore')
                for sig in text_signatures:
                    if chunk_str.startswith(sig.decode('utf-8', errors='ignore')):
                        return True
                
                return False
                
        except (IOError, OSError, UnicodeDecodeError):
            return False
    
    def search_in_file(self, filepath, keyword, case_sensitive=False, context_lines=False, no_duplicates=False):
        matches = []
        all_lines = []
        
        try:
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as file:
                all_lines = file.readlines()
                
            if context_lines:
                # Get context lines for each match
                context_results = []
                seen_contexts = set() if no_duplicates else None
                
                for i, line in enumerate(all_lines, 1):
                    line_content = line.rstrip('\n\r')
                    if case_sensitive:
                        if keyword in line_content:
                            context_data = self.get_context_lines(all_lines, i-1, 2)  # 2 lines above and below
                            if no_duplicates:
                                context_key = tuple((line_num, line.strip()) for line_num, line, _ in context_data)
                                if context_key not in seen_contexts:
                                    seen_contexts.add(context_key)
                                    context_results.append((filepath, context_data))
                            else:
                                context_results.append((filepath, context_data))
                    else:
                        if keyword.lower() in line_content.lower():
                            context_data = self.get_context_lines(all_lines, i-1, 2)  # 2 lines above and below
                            if no_duplicates:
                                context_key = tuple((line_num, line.strip()) for line_num, line, _ in context_data)
                                if context_key not in seen_contexts:
                                    seen_contexts.add(context_key)
                                    context_results.append((filepath, context_data))
                            else:
                                context_results.append((filepath, context_data))
                
                return context_results
            else:
                # Original behavior without context lines
                for i, line in enumerate(all_lines, 1):
                    line_content = line.rstrip('\n\r')
                    if case_sensitive:
                        if keyword in line_content:
                            matches.append((filepath, i, line_content))
                    else:
                        if keyword.lower() in line_content.lower():
                            matches.append((filepath, i, line_content))
                
                return matches
                
        except Exception as e:
            pass
        return matches if not context_lines else []
    
    def get_context_lines(self, all_lines, match_index, context_size=2):
        """Get context lines around a match"""
        context_data = []
        start_line = max(0, match_index - context_size)
        end_line = min(len(all_lines), match_index + context_size + 1)
        
        for i in range(start_line, end_line):
            line_num = i + 1
            line_content = all_lines[i].rstrip('\n\r')
            is_match = (i == match_index)
            context_data.append((line_num, line_content, is_match))
        
        return context_data
    
    def search_files(self, directory, keyword, case_sensitive=False, context_lines=False, no_duplicates=False, show_skipped=False):
        results = []
        
        for root, _, files in os.walk(directory):
            for file in files:
                full_path = os.path.join(root, file)
                
                if self.is_text_file(full_path):
                    file_results = self.search_in_file(full_path, keyword, case_sensitive, context_lines, no_duplicates)
                    results.extend(file_results)
                else:
                    if show_skipped:
                        self.skipped_files.append(full_path)
        return results

def main():
    root = tk.Tk()
    app = FileSearchGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
